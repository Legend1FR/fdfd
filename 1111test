const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const fs = require("fs");
const input = require("input");
const http = require("http");
const https = require("https");
const { performance } = require('perf_hooks');

// بيانات الدخول تلقائية للسيرفر
const PHONE_NUMBER = "+967xxxxxxxxx";  // ضع رقمك هنا
const PASSWORD = "YOUR_PASSWORD"; // إذا كان لديك كلمة مرور 2FA
const PHONE_CODE = undefined; // يمكن تركه undefined ليتم تجاهله

const apiId = 23299626;
const apiHash = "89de50a19288ec535e8b008ae2ff268d";

console.log("🚀 البوت يعمل الآن 24 ساعة على السيرفر!");

// دالة لتسجيل الدخول والخروج
function logLoginLogout(type) {
  const logFile = 'login_logout_log.txt';
  const now = new Date().toISOString();
  fs.appendFileSync(logFile, `${type},${now}\n`, 'utf8');
}

// تسجيل الدخول
logLoginLogout('login');

// نحاول تحميل الجلسة من ملف
let stringSession = new StringSession("");

if (fs.existsSync("session.txt")) {
  const savedSession = fs.readFileSync("session.txt", "utf8");
  stringSession = new StringSession(savedSession.trim());
}

(async () => {
  console.log("📲 بدء الاتصال بتليجرام...");
  const client = new TelegramClient(stringSession, apiId, apiHash, {
    connectionRetries: 5,
  });

  // تسجيل الدخول عند الحاجة فقط
  try {
    await client.start({
      phoneNumber: async () => PHONE_NUMBER,
      password: async () => PASSWORD,
      phoneCode: async () => PHONE_CODE,
      onError: (err) => console.log("❌ خطأ:", err),
    });
  } catch (err) {
    if (err.errorMessage === 'AUTH_KEY_DUPLICATED') {
      console.error('❌ AUTH_KEY_DUPLICATED: سيتم حذف الجلسة القديمة وإنشاء جلسة جديدة.');
      fs.unlinkSync('session.txt'); // حذف ملف الجلسة القديمة
      stringSession = new StringSession(""); // إعادة تعيين الجلسة
      await client.start({
        phoneNumber: async () => PHONE_NUMBER,
        password: async () => PASSWORD,
        phoneCode: async () => PHONE_CODE,
        onError: (err) => console.log("❌ خطأ:", err),
      });
    } else {
      throw err; // إعادة رمي الخطأ إذا لم يكن AUTH_KEY_DUPLICATED
    }
  }

  console.log("✅ تم تسجيل الدخول!");
  const sessionString = client.session.save();

  // حفظ الجلسة للاستخدام التالي
  fs.writeFileSync("session.txt", sessionString);
  console.log("💾 تم حفظ الجلسة في session.txt");

  await client.sendMessage("me", { message: "🚀 بوت الإشعارات شغال!" });

  // تحقق من الانضمام للبوتات المطلوبة مرة واحدة فقط في الحياة
  const joinedBotsFile = 'joined_bots.txt';
  if (!fs.existsSync(joinedBotsFile)) {
    try {
      // قائمة البوتات المطلوبة
      const botsToJoin = ['GMGN_sol_bot', 'solBigamout'];
      for (const bot of botsToJoin) {
        // أرسل فقط للبوتات التي تنتهي بـ _bot
        if (bot.endsWith('_bot')) {
          await client.sendMessage(bot, { message: '/start' });
          await sleep(2000);
        } else {
          console.log(`⚠️ تخطي ${bot}: ليس بوت تليجرام.`);
        }
      }
      fs.writeFileSync(joinedBotsFile, 'done');
      console.log('✅ تم الانضمام لكل البوتات المطلوبة لأول مرة.');
    } catch (err) {
      console.error('❌ خطأ أثناء الانضمام للبوتات:', err.message);
    }
  }

  // التتبع والتوجيه
  client.addEventHandler(async (update) => {
    try {
      // تعديل شروط الفلترة لإضافة الفرز الرابع
      if (update.message && typeof update.message.message === "string") {
        const msg = update.message;
        const text = msg.message;

        // فلترة الرسائل التي تحتوي على "counts: 1" أو أكثر و"60 SOL" أو أكثر
        if (/\bcounts:\s*(\d+)\b/i.test(text) && parseInt(text.match(/\bcounts:\s*(\d+)\b/i)[1]) >= 1 &&
            /([6-9]\d|\d{3,})\.\d{2}\s*SOL(\D|$)/.test(text)) {

          // فلترة "5m" بحيث تكون بين 0% و 2000%
          const fiveMinMatch = text.match(/5m\s*\((\d+\.\d+)%\)/);
          if (fiveMinMatch) {
            const fiveMinPercentage = parseFloat(fiveMinMatch[1]);
            if (fiveMinPercentage > 2000) {
              console.log(`⚠️ النسبة 5m (${fiveMinPercentage}%) أكبر من 2000%. تخطي.`);
              return;
            }
          }

          // الفرز الرابع: التحقق من أن عدد الأيام (d) يساوي 0
          const ageMatch = text.match(/age:\s*(\d+)d\s*(\d+)h/);
          if (ageMatch) {
            const days = parseInt(ageMatch[1]);
            if (days !== 0) {
              console.log(`⚠️ عدد الأيام (d) ليس 0. تخطي.`);
              return;
            }
          }

          const startTime = performance.now();
          // استخراج التوكن بعد ca:
          const caMatch = text.match(/ca:\s*([\w]+)/);
          if (caMatch && caMatch[1]) {
            const token = caMatch[1];
            if (sentTokens.has(token)) {
              console.log(`⚠️ التوكن ${token} تم إرساله مسبقًا. تخطي.`);
              return;
            }
            // طباعة التوكن فقط بدون ca:
            console.log(token);
            // حفظ التوكن في ملف لاستخدامه في بوت sniperoo
            fs.writeFileSync('last_token.txt', token, 'utf8');

            // إرسال التوكن لمعرفة السعر قبل الشراء
            await client.sendMessage(botUsername, { message: token });
            console.log('📩 تم إرسال التكوين لمعرفة السعر قبل الشراء.');

            // إرسال أمر الشراء المباشر
            const buyMsg = `/buy ${token} ${buyPrice}`;
            await client.sendMessage(botUsername, { message: buyMsg });
            console.log('✅ تم إرسال أمر الشراء المباشر:', buyMsg);

            // إضافة التوكن إلى القائمة المرسلة
            sentTokens.add(token);
            fs.appendFileSync(sentTokensFile, `${token}\n`, 'utf8');

            const endTime = performance.now();
            const executionTimeLog = `⏱️ وقت التنفيذ للتوكن ${token}: ${(endTime - startTime).toFixed(2)} مللي ثانية.`;
            console.log(executionTimeLog);
            executionLogsBuffer.push(`${executionTimeLog}\n`);
          }
        }
      }
    } catch (err) {
      console.error("❌ خطأ أثناء التوجيه:", err.message);
    }
  });
})();

const botUsername = 'GMGN_sol_bot';

// دالة التداول التلقائي في بوت GMGN
async function tradeInGMGNBot(client, token) {
  const lastStartFile = 'gmgn_last_start.txt';
  let shouldSendStart = true;
  try {
    // تحقق من آخر إرسال لـ /start
    if (fs.existsSync(lastStartFile)) {
      const lastStartDate = fs.readFileSync(lastStartFile, 'utf8').trim();
      const today = new Date().toISOString().slice(0, 10);
      if (lastStartDate === today) {
        shouldSendStart = false;
      }
    }
    // إرسال /start مرة واحدة فقط يومياً
    if (shouldSendStart) {
      await client.sendMessage(botUsername, { message: '/start' });
      fs.writeFileSync(lastStartFile, new Date().toISOString().slice(0, 10));
      await sleep(2000);
    }
    // إرسال التوكن
    await client.sendMessage(botUsername, { message: token });
    await sleep(3000);

    // استقبال رسائل البوت وطباعة كل رسالة والبحث عن السعر
    let price = null;
    let done = false;
    let lastBotMessage = null;
    const handler = async (update) => {
      // تحقق من أن الرسالة من بوت GMGN بناءً على اسم المستخدم أو peerId
      if (update.message && update.message.peerId && (
            (update.message.peerId.userId && update.message.peerId.userId.toString().includes('GMGN')) ||
            (update.message.peerId.channelId && botUsername.includes('GMGN'))
          )) {
        const text = update.message.message;
        lastBotMessage = text;
        // تحقق أن الرسالة تحتوي على التوكن المطلوب
        if (text.includes(token)) {
          // استخراج السعر من الرسالة
          let priceMatch = text.match(/price:\s*\$?([\d\.]+)/i);
          if (priceMatch && priceMatch[1]) {
            price = parseFloat(priceMatch[1]);
            done = true;
            // طباعة السعر فقط بدون باقي الرسالة وبدون علامة الدولار
            console.log('📩 السعر من GMGN: ' + priceMatch[1]);
            // حساب السعر الجديد بزيادة 1000%
            const newPrice = (price * 10).toFixed(6);
            // إرسال أمر التداول مباشرة
            const orderMsg = `/create limitbuy ${token} 0.5@${newPrice} -exp 86400`;
            await client.sendMessage(botUsername, { message: orderMsg });
            console.log('✅ تم إرسال أمر التداول:', orderMsg);
          } else {
            // إذا لم يوجد سعر، اطبع الرسالة كاملة
            console.log('📩 رسالة من GMGN:\n' + text);
          }
        }
      }
    };
    client.addEventHandler(handler);
    // انتظر حتى يتم استقبال السعر أو انتهاء المهلة
    let tries = 0;
    while (!done && tries < 10) {
      await sleep(1000);
      tries++;
    }
    client.removeEventHandler(handler);
    if (!price) {
      console.log('📩 رد البوت بعد ارسال التوكن:\n' + (lastBotMessage || 'لم يتم استقبال أي رسالة من البوت بعد إرسال التوكن'));
      return;
    }
    // حساب السعر الجديد بزيادة 1000%
    const newPrice = (price * 10).toFixed(6);
    // إرسال أمر التداول
    const orderMsg = `/create limitbuy ${token} 0.5@${newPrice} -exp 86400`;
    await client.sendMessage(botUsername, { message: orderMsg });
    console.log('✅ تم إرسال أمر التداول:', orderMsg);
  } catch (err) {
    console.error('❌ خطأ في التداول مع GMGN:', err.message);
  }
}

// دالة تأخير بسيطة
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

let buyPrice = 0.5; // السعر الافتراضي

const PORT = process.env.PORT || 3000;
http.createServer((req, res) => {
  if (req.method === "POST" && req.url === "/delete-all") {
    // مسح محتويات ملف السجلات
    fs.writeFileSync('execution_logs.txt', '', 'utf8');
    res.writeHead(200, { "Content-Type": "text/html; charset=utf-8" });
    res.end(`
      <div style='text-align:center;'>
        <div style='font-size:2em;'>🚀 تم مسح جميع السجلات بنجاح!</div>
        <a href="/" style='font-size:1.5em; color:#0078D7;'>العودة إلى الصفحة الرئيسية</a>
      </div>
    `);
    return;
  }

  if (req.method === "POST" && req.url === "/update-price") {
    let body = "";
    req.on("data", chunk => {
      body += chunk.toString();
    });
    req.on("end", () => {
      const params = new URLSearchParams(body);
      const newPrice = parseFloat(params.get("price"));
      if (!isNaN(newPrice) && newPrice > 0) {
        buyPrice = newPrice;
        res.writeHead(200, { "Content-Type": "text/html; charset=utf-8" });
        res.end(`
          <div style='text-align:center;'>
            <div style='font-size:2em;'>✅ تم تحديث السعر بنجاح إلى: ${buyPrice}</div>
            <a href="/" style='font-size:1.5em; color:#0078D7;'>العودة إلى الصفحة الرئيسية</a>
          </div>
        `);
      } else {
        res.writeHead(400, { "Content-Type": "text/html; charset=utf-8" });
        res.end(`
          <div style='text-align:center;'>
            <div style='font-size:2em; color:red;'>❌ السعر المدخل غير صالح!</div>
            <a href="/" style='font-size:1.5em; color:#0078D7;'>العودة إلى الصفحة الرئيسية</a>
          </div>
        `);
      }
    });
    return;
  }

  // حساب عدد مرات الدخول والخروج خلال آخر 24 ساعة
  let count = 0;
  let executionLogs = '';
  try {
    const logFile = 'login_logout_log.txt';
    if (fs.existsSync(logFile)) {
      const logs = fs.readFileSync(logFile, 'utf8').split('\n').filter(Boolean);
      const now = Date.now();
      const oneDay = 24 * 60 * 60 * 1000;
      count = logs.filter(line => {
        const [, time] = line.split(',');
        return now - new Date(time).getTime() <= oneDay;
      }).length;
    }

    // قراءة السجلات الخاصة بوقت التنفيذ
    const executionLogFile = 'execution_logs.txt';
    if (fs.existsSync(executionLogFile)) {
      executionLogs = fs.readFileSync(executionLogFile, 'utf8');
    }
  } catch {}
  res.writeHead(200, { "Content-Type": "text/html; charset=utf-8" });
  res.end(`
    <div style='text-align:center;'>
      <div style='font-size:2em;'>🚀 البوت يعمل الآن 24 ساعة على السيرفر!</div>
      <div style='margin-top:20px; font-size:1.5em;'>
        <form method="POST" action="/update-price">
          <label for="price" style='font-size:1.2em;'>تحديث سعر الشراء:</label>
          <input type="number" step="0.0001" name="price" id="price" value="${buyPrice}" style='font-size:1.2em; margin:10px;' required />
          <button type="submit" style='font-size:1.2em; color:white; background-color:green; padding:5px 15px; border:none; cursor:pointer;'>تحديث</button>
        </form>
      </div>
      <div style='margin-top:20px; font-size:3em; color:#0078D7; font-weight:bold;'>عدد مرات تسجيل الدخول والخروج خلال 24 ساعة: ${count}</div>
      <div style='margin-top:20px; font-size:1.5em; color:#333;'>
        <h3>سجلات وقت التنفيذ:</h3>
        <pre style='text-align:left;'>${executionLogs}</pre>
      </div>
      <form method="POST" action="/delete-all" style='margin-top:20px;'>
        <button type="submit" style='font-size:1.5em; color:white; background-color:red; padding:10px 20px; border:none; cursor:pointer;'>Delete All</button>
      </form>
    </div>
  `);
}).listen(PORT, () => {
  console.log(`🌐 HTTP Server running on port ${PORT}`);
});

const KEEP_ALIVE_URL = "https://cdcd.onrender.com/";
setInterval(() => {
  https.get(KEEP_ALIVE_URL, (res) => {
    console.log(`🔄 Keep Alive Ping: ${KEEP_ALIVE_URL} - Status: ${res.statusCode}`);
  }).on("error", (e) => {
    console.error(`❌ Keep Alive Error: ${e.message}`);
  });
}, 10 * 60 * 1000); // كل 10 دقائق

// تسجيل الخروج عند إنهاء العملية
process.on('exit', () => {
  logLoginLogout('logout');
});
process.on('SIGINT', () => {
  logLoginLogout('logout');
  process.exit();
});

const sentTokensFile = 'sent_tokens.txt';
let sentTokens = new Set();
if (fs.existsSync(sentTokensFile)) {
  const tokens = fs.readFileSync(sentTokensFile, 'utf8').split('\n').filter(Boolean);
  sentTokens = new Set(tokens);
}

// تحسين الأداء عبر تقليل عمليات الإدخال/الإخراج (I/O) والكتابة المجمعة
const executionLogsBuffer = [];

// كتابة السجلات المجمعة إلى الملف بشكل دوري
setInterval(() => {
  if (executionLogsBuffer.length > 0) {
    fs.appendFileSync('execution_logs.txt', executionLogsBuffer.join(''), 'utf8');
    executionLogsBuffer.length = 0;
  }
}, 5000); // كل 5 ثوانٍ

