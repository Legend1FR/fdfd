const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const fs = require("fs");
const input = require("input");
const http = require("http");
const https = require("https");
const { exec } = require("child_process"); // لإرسال الأوامر إلى البوت
const multer = require("multer"); // إضافة مكتبة multer لمعالجة رفع الملفات


const PHONE_NUMBER = "+967781430676"; // ضع رقمك هنا
const PASSWORD = "YOUR_PASSWORD"; // إذا كان لديك كلمة مرور 2FA
const PHONE_CODE = undefined; // يمكن تركه undefined ليتم تجاهله

const apiId = 23299626;
const apiHash = "89de50a19288ec535e8b008ae2ff268d";

console.log("🚀 البوت يعمل الآن 24 ساعة على السيرفر!");

// دالة لتسجيل الدخول والخروج
function logLoginLogout(type) {
  const logFile = 'login_logout_log.txt';
  const now = new Date().toISOString();
  fs.appendFileSync(logFile, `${type},${now}\n`, 'utf8');
}

// تسجيل الدخول
logLoginLogout('login');

// نحاول تحميل الجلسة من ملف
let stringSession = new StringSession("");

if (fs.existsSync("session.txt")) {
  const savedSession = fs.readFileSync("session.txt", "utf8");
  stringSession = new StringSession(savedSession.trim());
}

// تعريف الكائن client في النطاق العام
const client = new TelegramClient(stringSession, apiId, apiHash, {
  connectionRetries: 5,
});

(async () => {
  console.log("📲 بدء الاتصال بتليجرام...");

  // تسجيل الدخول عند الحاجة فقط
  await client.start({
    phoneNumber: async () => PHONE_NUMBER,
    password: async () => PASSWORD,
    phoneCode: async () => await input.text("أدخل كود التحقق من تيليجرام:"),
    onError: (err) => console.log("❌ خطأ:", err),
  });

  console.log("✅ تم تسجيل الدخول!");
  const sessionString = client.session.save();

  // حفظ الجلسة للاستخدام التالي
  fs.writeFileSync("session.txt", sessionString);
  console.log("💾 تم حفظ الجلسة في session.txt");

  await client.sendMessage("me", { message: "🚀 بوت الإشعارات شغال!" });
})();

// دالة تأخير بسيطة
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

const PORT = process.env.PORT || 3100;
http.createServer((req, res) => {
  const url = new URL(req.url, `http://${req.headers.host}`);

  if (url.pathname === '/search-token' && req.method === 'GET') {
    const token = url.searchParams.get('token');

    if (!token) {
      res.writeHead(400, { 'Content-Type': 'text/plain; charset=utf-8' });
      res.end('❌ يرجى تقديم اسم التوكن في الطلب.');
      return;
    }

    const filePath = `${CONFIG_DIR}/${token}.txt`;

    if (fs.existsSync(filePath)) {
      const fileContent = fs.readFileSync(filePath, 'utf8');
      res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });
      res.end(fileContent);
    } else {
      res.writeHead(404, { 'Content-Type': 'text/plain; charset=utf-8' });
      res.end('❌ الملف غير موجود.');
    }
  } else if (url.pathname === '/' && req.method === 'GET') {
    // صفحة البحث عن التوكن
    fs.readdir(CONFIG_DIR, (err, files) => {
      if (err) {
        res.writeHead(500, { 'Content-Type': 'text/plain; charset=utf-8' });
        res.end('❌ حدث خطأ أثناء قراءة الملفات.');
        return;
      }

      // تصفية الملفات الناجحة فقط
      const successfulConfigs = files
        .filter(file => file.endsWith('.txt') && file !== 'Buy_Token.txt')
        .map(file => {
          const filePath = `${CONFIG_DIR}/${file}`;
          const content = fs.readFileSync(filePath, 'utf8');
          if (content.includes('ناجح ✅️')) {
            return file.replace('.txt', ''); // إزالة الامتداد
          }
          return null;
        })
        .filter(Boolean);

      const configList = successfulConfigs
        .map(token => `
          <li>
            ${token} 
            <form method="POST" action="/sell" style="display:inline;">
              <input type="hidden" name="token" value="${token}" />
              <button type="submit" style="padding:5px 10px; font-size:0.9em;">SELL</button>
            </form>
          </li>
        `)
        .join('');

      res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
      res.end(`
        <html>
          <head>
            <title>بحث عن التكوين</title>
          </head>
          <body style="text-align:center; font-family:Arial;">
            <h1>🔍 البحث عن التكوين</h1>
            <form method="GET" action="/search-token">
              <input type="text" name="token" placeholder="أدخل اسم التوكن" required style="padding:10px; font-size:1em;" />
              <button type="submit" style="padding:10px 20px; font-size:1em;">بحث</button>
            </form>
            <h2>✅ التكوينات الناجحة</h2>
            <ul style="list-style:none; padding:0;">${configList}</ul>
          </body>
        </html>
      `);
    });
  } else if (url.pathname === '/upload' && req.method === 'GET') {
    // صفحة رفع الملفات
    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    res.end(`
      <html>
        <head>
          <title>رفع ملفات التكوين</title>
        </head>
        <body style="text-align:center; font-family:Arial;">
          <h1>📤 رفع ملفات التكوين</h1>
          <form method="POST" action="/upload" enctype="multipart/form-data">
            <input type="file" name="configFile" required style="padding:10px; font-size:1em;" />
            <button type="submit" style="padding:10px 20px; font-size:1em;">رفع</button>
          </form>
        </body>
      </html>
    `);
  } else if (url.pathname === '/upload' && req.method === 'POST') {
    const form = new multer({ dest: 'uploads/' });
    form.single('configFile')(req, res, (err) => {
      if (err) {
        res.writeHead(500, { 'Content-Type': 'text/plain; charset=utf-8' });
        res.end('❌ حدث خطأ أثناء رفع الملف.');
        return;
      }

      const uploadedFile = req.file;
      if (uploadedFile) {
        res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });
        res.end(`✅ تم رفع الملف بنجاح: ${uploadedFile.originalname}`);
      } else {
        res.writeHead(400, { 'Content-Type': 'text/plain; charset=utf-8' });
        res.end('❌ يرجى اختيار ملف لرفعه.');
      }
    });
  } else if (url.pathname === '/files' && req.method === 'GET') {
    // صفحة عرض الملفات المرفوعة
    fs.readdir(CONFIG_DIR, (err, files) => {
      if (err) {
        res.writeHead(500, { 'Content-Type': 'text/plain; charset=utf-8' });
        res.end('❌ حدث خطأ أثناء قراءة الملفات.');
        return;
      }

      const fileLinks = files
        .filter(file => file.endsWith('.txt'))
        .map(file => `<li><a href="/files/${file}" target="_blank">${file}</a></li>`)
        .join('');

      res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
      res.end(`
        <html>
          <head>
            <title>الملفات المرفوعة</title>
          </head>
          <body style="text-align:center; font-family:Arial;">
            <h1>📂 الملفات المرفوعة</h1>
            <ul style="list-style:none; padding:0;">${fileLinks}</ul>
            <a href="/upload" style="display:block; margin-top:20px;">🔙 العودة إلى صفحة الرفع</a>
          </body>
        </html>
      `);
    });
  } else if (url.pathname.startsWith('/files/') && req.method === 'GET') {
    // عرض محتوى ملف معين
    const fileName = url.pathname.replace('/files/', '');
    const filePath = `${CONFIG_DIR}/${fileName}`;

    if (fs.existsSync(filePath)) {
      const fileContent = fs.readFileSync(filePath, 'utf8');
      res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });
      res.end(fileContent);
    } else {
      res.writeHead(404, { 'Content-Type': 'text/plain; charset=utf-8' });
      res.end('❌ الملف غير موجود.');
    }
  } else if (url.pathname === '/sell' && req.method === 'POST') {
    // معالجة طلب SELL
    let body = '';
    req.on('data', chunk => {
      body += chunk.toString();
    });
    req.on('end', async () => {
      const params = new URLSearchParams(body);
      const token = params.get('token');

      if (token) {
        const sellCommand = `/sell ${token} 100%`;
        fs.appendFileSync("Sell_Token.txt", `${sellCommand}\n`, 'utf8');

        // إرسال الأمر إلى البوت
        try {
          await client.sendMessage("@GMGN_sol_bot", { message: sellCommand });
          res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });
          res.end(`✅ تم إرسال أمر SELL للتكوين: ${token}`);
        } catch (err) {
          res.writeHead(500, { 'Content-Type': 'text/plain; charset=utf-8' });
          res.end(`❌ حدث خطأ أثناء إرسال أمر SELL: ${err.message}`);
        }
      } else {
        res.writeHead(400, { 'Content-Type': 'text/plain; charset=utf-8' });
        res.end('❌ لم يتم تقديم اسم التوكن.');
      }
    });
  } else {
    // صفحة الحالة الرئيسية
    res.writeHead(200, { "Content-Type": "text/html; charset=utf-8" });
    res.end(`
      <div style='text-align:center;'>
        <div style='font-size:2em;'>🚀 البوت يعمل الآن 24 ساعة على السيرفر!</div>
      </div>
    `);
  }
}).listen(PORT, () => {
  console.log(`🌐 HTTP Server running on port ${PORT}`);
});

const KEEP_ALIVE_URL = "https://fdfd.onrender.com/";
setInterval(() => {
  https.get(KEEP_ALIVE_URL, (res) => {
    console.log(`🔄 Keep Alive Ping: ${KEEP_ALIVE_URL} - Status: ${res.statusCode}`);
  }).on("error", (e) => {
    console.error(`❌ Keep Alive Error: ${e.message}`);
  });
}, 10 * 60 * 1000); // كل 10 دقائق

// تسجيل الخروج عند إنهاء العملية
process.on('exit', () => {
  logLoginLogout('logout');
});
process.on('SIGINT', () => {
  logLoginLogout('logout');
  process.exit();
});

// تعديل لجعل البحث يشمل جميع الرسائل الواردة
const tokenData = {}; // تخزين بيانات التوكنات مؤقتًا

client.addEventHandler(async (update) => {
  try {
    if (update.message && typeof update.message.message === "string") {
      const msg = update.message;
      const text = msg.message;

      // التحقق من الرسائل التي تحتوي على "COUNTS: X"
      const countMatch = text.match(/COUNTS:\s*(\d+)/i);
      const tokenMatch = text.match(/ca:\s*([\w]+)/i);

      if (countMatch && tokenMatch) {
        const count = parseInt(countMatch[1], 10);
        const token = tokenMatch[1];
        const now = Date.now();

        // إذا كانت الرسالة الأولى "COUNTS: 1"
        if (count === 1) {
          tokenData[token] = [{ count, timestamp: now }];
          fs.writeFileSync(`${CONFIG_DIR}/${token}.txt`, `${token} : Counts: 1\n`, 'utf8');
        } else if (tokenData[token]) {
          // إذا كانت الرسالة تحتوي على "COUNTS: X" حيث X > 1
          const previous = tokenData[token][tokenData[token].length - 1];
          const timeDiff = Math.round((now - previous.timestamp) / 1000); // الفرق بالثواني

          // تحديث البيانات وحفظها في الملف
          tokenData[token].push({ count, timestamp: now });
          fs.appendFileSync(
            `${CONFIG_DIR}/${token}.txt`,
            `Counts: ${count} To Counts: ${previous.count} = ${timeDiff}second\n`,
            'utf8'
          );

          // التحقق عند الوصول إلى 10 فترات
          if (tokenData[token].length === 10) {
            const timeDiffs = tokenData[token].slice(1).map((entry, index) => {
              return Math.round((entry.timestamp - tokenData[token][index].timestamp) / 1000);
            });

            const isSuccessful = timeDiffs.every(diff => diff >= 12 && diff <= 5000);

            if (isSuccessful) {
              fs.appendFileSync(`${CONFIG_DIR}/${token}.txt`, `ناجح ✅️\n`, 'utf8');
              const buyCommand = `/buy ${token} 0.5`;
              fs.appendFileSync("Buy_Token.txt", `${buyCommand}\n`, 'utf8');

              // إرسال الأمر إلى البوت
              await client.sendMessage("@GMGN_sol_bot", { message: buyCommand });
            } else {
              fs.appendFileSync(`${CONFIG_DIR}/${token}.txt`, `فاشل ❌️\n`, 'utf8');
            }
          }
        }
      }
    }
  } catch (err) {
    console.error("❌ خطأ أثناء التوجيه:", err.message);
  }
});

// وظيفة لحذف ملفات التكوين القديمة
const DELETE_AFTER_HOURS = 48; // عدد الساعات قبل الحذف

function deleteOldConfigFiles() {
  const now = Date.now();
  const deleteThreshold = DELETE_AFTER_HOURS * 60 * 60 * 1000; // تحويل الساعات إلى ميلي ثانية

  fs.readdir(CONFIG_DIR, (err, files) => {
    if (err) {
      console.error("❌ خطأ أثناء قراءة الملفات:", err.message);
      return;
    }

    files.forEach((file) => {
      if (file.endsWith(".txt") && file !== "Buy_Token.txt") { // استهداف ملفات التكوين فقط
        const filePath = `${CONFIG_DIR}/${file}`;
        fs.stat(filePath, (err, stats) => {
          if (err) {
            console.error(`❌ خطأ أثناء فحص الملف ${file}:`, err.message);
            return;
          }

          const fileAge = now - stats.mtimeMs; // حساب عمر الملف
          if (fileAge > deleteThreshold) {
            fs.unlink(filePath, (err) => {
              if (err) {
                console.error('خطأ أثناء حذف الملف:', file, err.message);
              } else {
                console.log('تم حذف الملف القديم:', file);
              }
            });
          }
        });
      }
    });
  });
}

// تشغيل وظيفة الحذف كل ساعة
setInterval(function() {
  deleteOldConfigFiles();
}, 60 * 60 * 1000);

// إنشاء مجلد configs إذا لم يكن موجودًا
const CONFIG_DIR = `${__dirname}/configs`;
if (!fs.existsSync(CONFIG_DIR)) {
  fs.mkdirSync(CONFIG_DIR);
}

// نقل الملفات الحالية إلى مجلد configs
fs.readdir(__dirname, (err, files) => {
  if (err) {
    console.error("❌ خطأ أثناء قراءة الملفات:", err.message);
    return;
  }

  files.forEach((file) => {
    if (file.endsWith(".txt") && file !== "Buy_Token.txt") {
      const oldPath = `${__dirname}/${file}`;
      const newPath = `${CONFIG_DIR}/${file}`;

      fs.rename(oldPath, newPath, (err) => {
        if (err) {
          console.error(`❌ خطأ أثناء نقل الملف ${file}:`, err.message);
        } else {
          console.log(`✅ تم نقل الملف ${file} إلى المجلد configs.`);
        }
      });
    }
  });
});
