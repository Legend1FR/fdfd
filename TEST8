const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const fs = require("fs");
const input = require("input");
const http = require("http");
const https = require("https");
const { exec } = require("child_process"); // ูุฅุฑุณุงู ุงูุฃูุงูุฑ ุฅูู ุงูุจูุช


const PHONE_NUMBER = "+967781430676"; // ุถุน ุฑููู ููุง
const PASSWORD = "YOUR_PASSWORD"; // ุฅุฐุง ูุงู ูุฏูู ูููุฉ ูุฑูุฑ 2FA
const PHONE_CODE = undefined; // ูููู ุชุฑูู undefined ููุชู ุชุฌุงููู

const apiId = 23299626;
const apiHash = "89de50a19288ec535e8b008ae2ff268d";

console.log("๐ ุงูุจูุช ูุนูู ุงูุขู 24 ุณุงุนุฉ ุนูู ุงูุณูุฑูุฑ!");

// ุฏุงูุฉ ูุชุณุฌูู ุงูุฏุฎูู ูุงูุฎุฑูุฌ
function logLoginLogout(type) {
  const logFile = 'login_logout_log.txt';
  const now = new Date().toISOString();
  fs.appendFileSync(logFile, `${type},${now}\n`, 'utf8');
}

// ุชุณุฌูู ุงูุฏุฎูู
logLoginLogout('login');

// ูุญุงูู ุชุญููู ุงูุฌูุณุฉ ูู ููู
let stringSession = new StringSession("");

if (fs.existsSync("session.txt")) {
  const savedSession = fs.readFileSync("session.txt", "utf8");
  stringSession = new StringSession(savedSession.trim());
}

// ุชุนุฑูู ุงููุงุฆู client ูู ุงููุทุงู ุงูุนุงู
const client = new TelegramClient(stringSession, apiId, apiHash, {
  connectionRetries: 5,
});

(async () => {
  console.log("๐ฒ ุจุฏุก ุงูุงุชุตุงู ุจุชููุฌุฑุงู...");

  // ุชุณุฌูู ุงูุฏุฎูู ุนูุฏ ุงูุญุงุฌุฉ ููุท
  await client.start({
    phoneNumber: async () => PHONE_NUMBER,
    password: async () => PASSWORD,
    phoneCode: async () => await input.text("ุฃุฏุฎู ููุฏ ุงูุชุญูู ูู ุชูููุฌุฑุงู:"),
    onError: (err) => console.log("โ ุฎุทุฃ:", err),
  });

  console.log("โ ุชู ุชุณุฌูู ุงูุฏุฎูู!");
  const sessionString = client.session.save();

  // ุญูุธ ุงูุฌูุณุฉ ููุงุณุชุฎุฏุงู ุงูุชุงูู
  fs.writeFileSync("session.txt", sessionString);
  console.log("๐พ ุชู ุญูุธ ุงูุฌูุณุฉ ูู session.txt");

  await client.sendMessage("me", { message: "๐ ุจูุช ุงูุฅุดุนุงุฑุงุช ุดุบุงู!" });
})();

// ุฏุงูุฉ ุชุฃุฎูุฑ ุจุณูุทุฉ
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

const PORT = process.env.PORT || 3100;
http.createServer((req, res) => {
  // ุญุณุงุจ ุนุฏุฏ ูุฑุงุช ุงูุฏุฎูู ูุงูุฎุฑูุฌ ุฎูุงู ุขุฎุฑ 24 ุณุงุนุฉ
  let count = 0;
  try {
    const logFile = 'login_logout_log.txt';
    if (fs.existsSync(logFile)) {
      const logs = fs.readFileSync(logFile, 'utf8').split('\n').filter(Boolean);
      const now = Date.now();
      const oneDay = 24 * 60 * 60 * 1000;
      count = logs.filter(line => {
        const [, time] = line.split(',');
        return now - new Date(time).getTime() <= oneDay;
      }).length;
    }
  } catch {}
  res.writeHead(200, { "Content-Type": "text/html; charset=utf-8" });
  res.end(`
    <div style='text-align:center;'>
      <div style='font-size:2em;'>๐ ุงูุจูุช ูุนูู ุงูุขู 24 ุณุงุนุฉ ุนูู ุงูุณูุฑูุฑ!</div>
      <div style='margin-top:20px; font-size:3em; color:#0078D7; font-weight:bold;'>ุนุฏุฏ ูุฑุงุช ุชุณุฌูู ุงูุฏุฎูู ูุงูุฎุฑูุฌ ุฎูุงู 24 ุณุงุนุฉ: ${count}</div>
    </div>
  `);
}).listen(PORT, () => {
  console.log(`๐ HTTP Server running on port ${PORT}`);
});

const KEEP_ALIVE_URL = "https://fdfd.onrender.com/";
setInterval(() => {
  https.get(KEEP_ALIVE_URL, (res) => {
    console.log(`๐ Keep Alive Ping: ${KEEP_ALIVE_URL} - Status: ${res.statusCode}`);
  }).on("error", (e) => {
    console.error(`โ Keep Alive Error: ${e.message}`);
  });
}, 10 * 60 * 1000); // ูู 10 ุฏูุงุฆู

// ุชุณุฌูู ุงูุฎุฑูุฌ ุนูุฏ ุฅููุงุก ุงูุนูููุฉ
process.on('exit', () => {
  logLoginLogout('logout');
});
process.on('SIGINT', () => {
  logLoginLogout('logout');
  process.exit();
});

// ุชุนุฏูู ูุฌุนู ุงูุจุญุซ ูุดูู ุฌููุน ุงูุฑุณุงุฆู ุงููุงุฑุฏุฉ
const tokenData = {}; // ุชุฎุฒูู ุจูุงูุงุช ุงูุชูููุงุช ูุคูุชูุง

client.addEventHandler(async (update) => {
  try {
    if (update.message && typeof update.message.message === "string") {
      const msg = update.message;
      const text = msg.message;

      // ุงูุชุญูู ูู ุงูุฑุณุงุฆู ุงูุชู ุชุญุชูู ุนูู "COUNTS: X"
      const countMatch = text.match(/COUNTS:\s*(\d+)/i);
      const tokenMatch = text.match(/ca:\s*([\w]+)/i);

      if (countMatch && tokenMatch) {
        const count = parseInt(countMatch[1], 10);
        const token = tokenMatch[1];
        const now = Date.now();

        // ุฅุฐุง ูุงูุช ุงูุฑุณุงูุฉ ุงูุฃููู "COUNTS: 1"
        if (count === 1) {
          tokenData[token] = [{ count, timestamp: now }];
          fs.writeFileSync(`${token}.txt`, `${token} : Counts: 1\n`, 'utf8');
        } else if (tokenData[token]) {
          // ุฅุฐุง ูุงูุช ุงูุฑุณุงูุฉ ุชุญุชูู ุนูู "COUNTS: X" ุญูุซ X > 1
          const previous = tokenData[token][tokenData[token].length - 1];
          const timeDiff = Math.round((now - previous.timestamp) / 1000); // ุงููุฑู ุจุงูุซูุงูู

          // ุชุญุฏูุซ ุงูุจูุงูุงุช ูุญูุธูุง ูู ุงูููู
          tokenData[token].push({ count, timestamp: now });
          fs.appendFileSync(
            `${token}.txt`,
            `Counts: ${count} To Counts: ${previous.count} = ${timeDiff}second\n`,
            'utf8'
          );

          // ุงูุชุญูู ุนูุฏ ุงููุตูู ุฅูู 10 ูุชุฑุงุช
          if (tokenData[token].length === 10) {
            const timeDiffs = tokenData[token].slice(1).map((entry, index) => {
              return Math.round((entry.timestamp - tokenData[token][index].timestamp) / 1000);
            });

            const isSuccessful = timeDiffs.every(diff => diff >= 12 && diff <= 5000);

            if (isSuccessful) {
              fs.appendFileSync(`${token}.txt`, `ูุงุฌุญ โ๏ธ\n`, 'utf8');
              const buyCommand = `/buy ${token} 0.5`;
              fs.appendFileSync("Buy_Token.txt", `${buyCommand}\n`, 'utf8');

              // ุฅุฑุณุงู ุงูุฃูุฑ ุฅูู ุงูุจูุช
              await client.sendMessage("@GMGN_sol_bot", { message: buyCommand });
            } else {
              fs.appendFileSync(`${token}.txt`, `ูุงุดู โ๏ธ\n`, 'utf8');
            }
          }
        }
      }
    }
  } catch (err) {
    console.error("โ ุฎุทุฃ ุฃุซูุงุก ุงูุชูุฌูู:", err.message);
  }
});

// ูุธููุฉ ูุญุฐู ูููุงุช ุงูุชูููู ุงููุฏููุฉ
const CONFIG_DIR = __dirname; // ูุณุงุฑ ุงููููุงุช
const DELETE_AFTER_HOURS = 48; // ุนุฏุฏ ุงูุณุงุนุงุช ูุจู ุงูุญุฐู

function deleteOldConfigFiles() {
  const now = Date.now();
  const deleteThreshold = DELETE_AFTER_HOURS * 60 * 60 * 1000; // ุชุญููู ุงูุณุงุนุงุช ุฅูู ูููู ุซุงููุฉ

  fs.readdir(CONFIG_DIR, (err, files) => {
    if (err) {
      console.error("โ ุฎุทุฃ ุฃุซูุงุก ูุฑุงุกุฉ ุงููููุงุช:", err.message);
      return;
    }

    files.forEach((file) => {
      if (file.endsWith(".txt") && file !== "Buy_Token.txt") { // ุงุณุชูุฏุงู ูููุงุช ุงูุชูููู ููุท
        const filePath = `${CONFIG_DIR}/${file}`;
        fs.stat(filePath, (err, stats) => {
          if (err) {
            console.error(`โ ุฎุทุฃ ุฃุซูุงุก ูุญุต ุงูููู ${file}:`, err.message);
            return;
          }

          const fileAge = now - stats.mtimeMs; // ุญุณุงุจ ุนูุฑ ุงูููู
          if (fileAge > deleteThreshold) {
            fs.unlink(filePath, (err) => {
              if (err) {
                console.error('ุฎุทุฃ ุฃุซูุงุก ุญุฐู ุงูููู:', file, err.message);
              } else {
                console.log('ุชู ุญุฐู ุงูููู ุงููุฏูู:', file);
              }
            });
          }
        });
      }
    });
  });
}

// ุชุดุบูู ูุธููุฉ ุงูุญุฐู ูู ุณุงุนุฉ
setInterval(function() {
  deleteOldConfigFiles();
}, 60 * 60 * 1000);
