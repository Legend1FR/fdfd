#!/usr/bin/env node

/**
 * ูุฑุงูุจ ุฎุงุฑุฌู ููุณูุฑูุฑ - ูููู ุชุดุบููู ูู ุฌูุงุฒ ุขุฎุฑ
 * ูุฐุง ุงูุณูุฑูุจุช ูุฑุณู ping ูู ูุชุฑุฉ ููุชุฃูุฏ ูู ุฃู ุงูุณูุฑูุฑ ูุง ููุงู
 * ูููู ุชุดุบููู ุนูู ุฎุฏูุฉ ูุซู GitHub Actions ุฃู ุฃู VPS ุขุฎุฑ
 */

const https = require('https');
const http = require('http');

// ุฅุนุฏุงุฏุงุช ุงููุฑุงูุจุฉ
const SERVER_URL = process.env.SERVER_URL || 'https://fdfd-i8p9.onrender.com';
const PING_INTERVAL = process.env.PING_INTERVAL || 8 * 60 * 1000; // 8 ุฏูุงุฆู
const WEBHOOK_URL = process.env.WEBHOOK_URL || null; // Discord/Slack webhook ููุชูุจููุงุช

let pingCount = 0;
let successCount = 0;
let lastResponseTime = 0;

// ุฏุงูุฉ ุฅุฑุณุงู ุชูุจูู ุฅูู webhook
function sendAlert(message, type = 'error') {
  if (!WEBHOOK_URL) return;

  const payload = {
    content: `๐จ **ูุฑุงูุจ ุงูุณูุฑูุฑ** - ${type === 'error' ? 'โ' : 'โ'} ${message}`,
    timestamp: new Date().toISOString()
  };

  const options = {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
  };

  const req = (WEBHOOK_URL.startsWith('https:') ? https : http).request(WEBHOOK_URL, options);
  req.write(JSON.stringify(payload));
  req.end();
}

// ุฏุงูุฉ ping ููุณูุฑูุฑ
function pingServer() {
  const startTime = Date.now();
  pingCount++;
  
  console.log(`\n๐ Ping #${pingCount} - ${new Date().toLocaleString()}`);
  console.log(`๐ก Target: ${SERVER_URL}/health`);
  
  const request = SERVER_URL.startsWith('https:') ? https : http;
  
  const options = {
    hostname: SERVER_URL.replace(/^https?:\/\//, ''),
    path: '/health',
    method: 'GET',
    headers: {
      'User-Agent': 'External-Monitor/1.0',
      'Accept': 'application/json'
    },
    timeout: 30000
  };

  const req = request.request(options, (res) => {
    let data = '';
    
    res.on('data', (chunk) => {
      data += chunk;
    });
    
    res.on('end', () => {
      const responseTime = Date.now() - startTime;
      lastResponseTime = responseTime;
      
      if (res.statusCode === 200) {
        successCount++;
        console.log(`โ Ping #${pingCount} successful`);
        console.log(`โฑ๏ธ  Response time: ${responseTime}ms`);
        console.log(`๐ Success rate: ${((successCount / pingCount) * 100).toFixed(1)}% (${successCount}/${pingCount})`);
        
        try {
          const healthData = JSON.parse(data);
          console.log(`๐ Server uptime: ${healthData.uptime}`);
          console.log(`๐ Tracked tokens: ${healthData.trackedTokens}`);
          console.log(`๐พ Memory usage: ${Math.round(healthData.memoryUsage.heapUsed / 1024 / 1024)}MB`);
          
          if (healthData.keepAlive) {
            console.log(`๐ Keep-alive: ${healthData.keepAlive.attempts} attempts, ${healthData.keepAlive.successRate} success rate`);
          }
        } catch (e) {
          console.log(`๐ Response received but couldn't parse JSON`);
        }
        
        // ุฅุฑุณุงู ุชูุจูู ุนูุฏ ุงูุนูุฏุฉ ููุนูู ุจุนุฏ ุฎุทุฃ
        if (pingCount > 1 && successCount === 1) {
          sendAlert(`ุงูุณูุฑูุฑ ุนุงุฏ ููุนูู ุจุนุฏ ${pingCount - 1} ูุญุงููุฉ ูุงุดูุฉ`, 'success');
        }
      } else {
        console.log(`โ Ping #${pingCount} failed with status: ${res.statusCode}`);
        console.log(`๐ Success rate: ${((successCount / pingCount) * 100).toFixed(1)}% (${successCount}/${pingCount})`);
        
        if (pingCount % 5 === 0) {
          sendAlert(`ุงูุณูุฑูุฑ ูุง ูุณุชุฌูุจ - Status: ${res.statusCode} - Success rate: ${((successCount / pingCount) * 100).toFixed(1)}%`);
        }
      }
    });
  });

  req.on('error', (error) => {
    console.log(`โ Ping #${pingCount} failed: ${error.message}`);
    console.log(`๐ Success rate: ${((successCount / pingCount) * 100).toFixed(1)}% (${successCount}/${pingCount})`);
    
    if (pingCount % 5 === 0) {
      sendAlert(`ุฎุทุฃ ูู ุงูุงุชุตุงู ุจุงูุณูุฑูุฑ: ${error.message} - Success rate: ${((successCount / pingCount) * 100).toFixed(1)}%`);
    }
  });

  req.on('timeout', () => {
    console.log(`โฐ Ping #${pingCount} timed out`);
    console.log(`๐ Success rate: ${((successCount / pingCount) * 100).toFixed(1)}% (${successCount}/${pingCount})`);
    req.destroy();
    
    if (pingCount % 3 === 0) {
      sendAlert(`ุงูุณูุฑูุฑ ูุง ูุณุชุฌูุจ (Timeout) - Success rate: ${((successCount / pingCount) * 100).toFixed(1)}%`);
    }
  });

  req.setTimeout(30000);
  req.end();
}

// ุฏุงูุฉ ุนุฑุถ ุฅุญุตุงุฆูุงุช
function showStats() {
  console.log('\n' + '='.repeat(60));
  console.log(`๐ ุฅุญุตุงุฆูุงุช ุงููุฑุงูุจุฉ`);
  console.log(`๐ ููุช ุงูุจุฏุก: ${startTime.toLocaleString()}`);
  console.log(`๐ข ุนุฏุฏ ุงููุญุงููุงุช: ${pingCount}`);
  console.log(`โ ุงููุฌุญ: ${successCount}`);
  console.log(`โ ุงููุงุดู: ${pingCount - successCount}`);
  console.log(`๐ ูุนุฏู ุงููุฌุงุญ: ${pingCount > 0 ? ((successCount / pingCount) * 100).toFixed(1) : 0}%`);
  console.log(`โฑ๏ธ  ุขุฎุฑ ุฒูู ุงุณุชุฌุงุจุฉ: ${lastResponseTime}ms`);
  console.log(`โฐ ุงูุชุญุฏูุซ ุงูุชุงูู ุฎูุงู: ${Math.round(PING_INTERVAL / 1000 / 60)} ุฏูููุฉ`);
  console.log('='.repeat(60));
}

// ุจุฏุก ุงููุฑุงูุจุฉ
const startTime = new Date();
console.log(`๐ ุจุฏุก ูุฑุงูุจุฉ ุงูุณูุฑูุฑ: ${SERVER_URL}`);
console.log(`โฐ ูุชุฑุฉ ุงููุฑุงูุจุฉ: ูู ${Math.round(PING_INTERVAL / 1000 / 60)} ุฏูููุฉ`);
console.log(`๐ก Webhook ููุชูุจููุงุช: ${WEBHOOK_URL ? 'ููุนู' : 'ุบูุฑ ููุนู'}`);

// ุฅุฑุณุงู ping ููุฑู
pingServer();

// ุฌุฏููุฉ ping ุฏูุฑู
setInterval(pingServer, PING_INTERVAL);

// ุนุฑุถ ุฅุญุตุงุฆูุงุช ูู 30 ุฏูููุฉ
setInterval(showStats, 30 * 60 * 1000);

// ุงูุชุนุงูู ูุน ุฅููุงู ุงูุจุฑูุงูุฌ
process.on('SIGINT', () => {
  console.log('\n๐ ุฅููุงู ุงููุฑุงูุจ...');
  showStats();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n๐ ุฅููุงู ุงููุฑุงูุจ...');
  showStats();
  process.exit(0);
});

// ุฑุณุงูุฉ ุจุฏุก ููุชูุจููุงุช
if (WEBHOOK_URL) {
  sendAlert(`ุจุฏุก ูุฑุงูุจุฉ ุงูุณูุฑูุฑ ${SERVER_URL} - ูุชุฑุฉ ุงููุฑุงูุจุฉ: ${Math.round(PING_INTERVAL / 1000 / 60)} ุฏูููุฉ`, 'success');
}
